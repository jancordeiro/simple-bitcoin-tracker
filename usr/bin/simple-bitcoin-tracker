#!/usr/bin/env python3

import gi
gi.require_version("Gtk", "3.0")
gi.require_version("WebKit2", "4.0")

from gi.repository import Gtk, GLib, WebKit2
import requests
from datetime import datetime
import webbrowser

class BitcoinTracker:
    def __init__(self):
        self.window = Gtk.Window(title="Simple Bitcoin Tracker")
        self.window.set_default_size(550, 550)
        self.window.connect("destroy", Gtk.main_quit)

        notebook = Gtk.Notebook()
        self.window.add(notebook)

        # ========== Tracker Tab ==========
        self.price_label = Gtk.Label(label="Fetching data...")
        self.price_label.set_name("price-label")
        self.last_update_label = Gtk.Label(label="Last update: ‚Äî")

        refresh_button = Gtk.Button(label="Refresh")
        refresh_button.connect("clicked", self.refresh_data)

        donate_button = Gtk.Button(label="Donate")
        donate_button.connect("clicked", lambda b: webbrowser.open("https://jancordeiro.github.io/donate"))

        vbox = Gtk.VBox(spacing=10)
        vbox.set_border_width(15)

        # Banner image
        banner = Gtk.Image.new_from_file("/usr/share/pixmaps/screen-01.png")
        banner.set_pixel_size(500)
        vbox.pack_start(banner, False, False, 0)

        vbox.pack_start(self.price_label, False, False, 0)
        vbox.pack_start(self.last_update_label, False, False, 0)
        vbox.pack_start(refresh_button, False, False, 0)
        vbox.pack_start(donate_button, False, False, 0)

        scrolled = Gtk.ScrolledWindow()
        scrolled.add(vbox)
        notebook.append_page(scrolled, Gtk.Label(label="Tracker"))

        # ========== Chart Tab ==========
        chart_html = """
		<!DOCTYPE html>
		<html>
		<head>
			<meta charset="UTF-8">
			<style>
				html, body {
					margin: 0;
					padding: 0;
					height: 100%;
					width: 100%;
					background-color: #0f111a;
				}
				.tradingview-widget-container {
					height: 100%;
					width: 100%;
				}
			</style>
		</head>
		<body>
			<div class="tradingview-widget-container">
				<script type="text/javascript"
					src="https://s3.tradingview.com/external-embedding/embed-widget-symbol-overview.js"
					async>
				{
				  "symbols": [
					["Bitcoin / USD", "BINANCE:BTCUSDT"],
					["Bitcoin / EUR", "BINANCE:BTCEUR"],
					["Bitcoin / BRL", "BINANCE:BTCBRL"]
				  ],
				  "colorTheme": "dark",
				  "isTransparent": false,
				  "locale": "en",
				  "width": "100%",
				  "height": "100%"
				}
				</script>
			</div>
		</body>
		</html>
		"""

        webview = WebKit2.WebView()
        webview.load_html(chart_html, "file://")
        notebook.append_page(webview, Gtk.Label(label="Chart"))

		# ========== Info Tab ==========
        info_text = (
            "<span font='12' foreground='#00FFFF'>"
                "üöÄ <b>Simple Bitcoin Tracker</b>\n\n"
                "üíæ Version: 1.0\n"
                "üë®‚Äçüíª Author: Jan Cordeiro\n"
                "üåê Website: https://jancordeiro.github.io\n\n"
                "This app uses Coingecko and Tradingview API to get updated prices and charts. Images from Freepik.com"
                "</span>"
        )
        info_label = Gtk.Label()
        info_label.set_markup(info_text)
        info_label.set_justify(Gtk.Justification.LEFT)
        info_label.set_line_wrap(True)
        info_label.set_margin_top(20)
        notebook.append_page(info_label, Gtk.Label(label="Info"))

        # ========== Apply CSS ==========
        css_provider = Gtk.CssProvider()
        css = b"""
        #price-label {
            font-size: 16px;
            color: #39FF14;
        }
        GtkWindow {
            background-color: #0d0d0d;
        }
        """
        css_provider.load_from_data(css)
        screen = self.window.get_screen()
        Gtk.StyleContext.add_provider_for_screen(
            screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

        self.refresh_data()
        self.window.show_all()

    def refresh_data(self, *_):
        try:
            res = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd,eur,brl&include_market_cap=true&include_24hr_change=true")
            data = res.json()["bitcoin"]
            text = (
                f"üíµ USD: $ {data['usd']:.2f} ({data['usd_24h_change']:.2f}% 24h)\n"
                f"üí∂ EUR: ‚Ç¨ {data['eur']:.2f} ({data['eur_24h_change']:.2f}% 24h)\n"
                f"üáßüá∑ BRL: R$ {data['brl']:.2f} ({data['brl_24h_change']:.2f}% 24h)\n"
                f"üí∞ Market Cap: $ {data['usd_market_cap'] / 1e9:.2f} B"
            )
            self.price_label.set_label(text)
            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.last_update_label.set_label(f"Last update: {now}")
        except Exception as e:
            self.price_label.set_label(f"Error fetching data: {e}")

if __name__ == "__main__":
    app = BitcoinTracker()
    Gtk.main()
